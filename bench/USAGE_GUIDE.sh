#!/bin/bash
# Text2Mem Benchmark 使用示例

set -e

# 颜色输出
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${BLUE}======================================"
echo "Text2Mem Benchmark 工作流程"
echo -e "======================================${NC}"

# 步骤1：生成数据
echo -e "\n${YELLOW}步骤1: 生成测试数据${NC}"
echo "命令: python bench/generate/generate.py"
echo ""
echo "这将："
echo "  - 读取配置: bench/generate/config/generation_plan.yaml"
echo "  - 生成3个阶段的数据"
echo "  - 输出到: bench/data/raw/YYYYMMDD_HHMMSS/"
echo ""
echo -e "${GREEN}提示: 支持断点恢复，中断后可以继续${NC}"
echo ""
read -p "按Enter继续查看下一步..."

# 步骤2：完整流程
echo -e "\n${YELLOW}步骤2: 运行完整处理流程${NC}"
echo "命令: python -m bench.tools.pipeline --raw latest --version v2"
echo ""
echo "这将依次执行："
echo "  1. 测试 - 对所有样本运行测试"
echo "  2. 清洗 - 过滤失败的样本"
echo "  3. 构建 - 生成最终benchmark"
echo ""
echo "输出:"
echo "  - bench/data/runs/YYYYMMDD_HHMMSS/tests/     (测试结果)"
echo "  - bench/data/runs/YYYYMMDD_HHMMSS/cleaned/   (清洗数据)"
echo "  - bench/data/benchmarks/v2/                  (最终benchmark)"
echo "  - bench/data/benchmarks/latest -> v2         (符号链接)"
echo ""
read -p "按Enter继续查看下一步..."

# 步骤3：验证
echo -e "\n${YELLOW}步骤3: 验证Benchmark${NC}"
echo "命令: python -m bench run --split benchmark --verbose"
echo ""
echo "这将："
echo "  - 对最终benchmark运行测试"
echo "  - 验证所有样本都能通过"
echo "  - 生成详细的运行报告"
echo ""
read -p "按Enter查看分步执行方式..."

# 分步执行
echo -e "\n${BLUE}======================================"
echo "分步执行方式"
echo -e "======================================${NC}"
echo ""
echo -e "${YELLOW}如果需要更细粒度的控制，可以分步执行：${NC}"
echo ""
echo "# 步骤1: 生成数据"
echo "python bench/generate/generate.py"
echo ""
echo "# 步骤2: 测试"
echo "python -m bench.tools.test --raw latest"
echo ""
echo "# 步骤3: 清洗"
echo "python -m bench.tools.clean --run latest"
echo ""
echo "# 步骤4: 构建"
echo "python -m bench.tools.build --run latest --version v2"
echo ""
echo "# 步骤5: 验证"
echo "python -m bench run --split benchmark --verbose"
echo ""
read -p "按Enter查看常用命令..."

# 常用命令
echo -e "\n${BLUE}======================================"
echo "常用命令"
echo -e "======================================${NC}"
echo ""
echo "# 查看最新生成的数据"
echo "ls -lt bench/data/raw/ | head -3"
echo ""
echo "# 查看最新的run"
echo "ls -lt bench/data/runs/ | head -3"
echo ""
echo "# 查看benchmark版本"
echo "ls -l bench/data/benchmarks/"
echo ""
echo "# 查看测试结果统计"
echo "cat bench/data/runs/\$(ls -t bench/data/runs/ | head -1)/tests/summary.json"
echo ""
echo "# 查看benchmark统计"
echo "cat bench/data/benchmarks/latest/stats.json"
echo ""
echo "# 统计样本数量"
echo "wc -l bench/data/raw/*/stage3.jsonl"
echo "wc -l bench/data/benchmarks/*/benchmark.jsonl"
echo ""
read -p "按Enter查看配置说明..."

# 配置
echo -e "\n${BLUE}======================================"
echo "配置文件"
echo -e "======================================${NC}"
echo ""
echo "主配置: bench/generate/config/generation_plan.yaml"
echo ""
echo "关键配置项:"
echo "  - total_samples: 总样本数（默认2000）"
echo "  - batch_size: 每批生成数量（默认10）"
echo "  - operation_proportions: 操作比例分配"
echo "  - llm: LLM配置（provider, model, api_key等）"
echo ""
echo -e "${GREEN}提示: 修改配置后需要重新运行生成${NC}"
echo ""
read -p "按Enter查看故障排除..."

# 故障排除
echo -e "\n${BLUE}======================================"
echo "常见问题"
echo -e "======================================${NC}"
echo ""
echo -e "${YELLOW}Q: stage3.jsonl为空？${NC}"
echo "A: LLM API调用失败，检查："
echo "   1. API密钥: echo \$OPENAI_API_KEY"
echo "   2. API URL: 查看generation_plan.yaml"
echo "   3. 错误详情: 查看checkpoint文件"
echo ""
echo -e "${YELLOW}Q: benchmark找不到？${NC}"
echo "A: latest符号链接可能不存在："
echo "   cd bench/data/benchmarks && ln -sf v2 latest"
echo ""
echo -e "${YELLOW}Q: 测试没有进度输出？${NC}"
echo "A: 确保日志级别正确，或添加--verbose参数"
echo ""
echo -e "${YELLOW}Q: 清洗保留了错误数量的样本？${NC}"
echo "A: 查看日志中的filter_failed参数，应该是True"
echo ""

echo -e "\n${BLUE}======================================"
echo "更多信息"
echo -e "======================================${NC}"
echo ""
echo "详细文档:"
echo "  - bench/README.md       - 快速开始"
echo "  - bench/WORKFLOW.md     - 详细工作流程"
echo "  - bench/CHANGES.md      - 变更总结"
echo ""
echo "在线帮助:"
echo "  python bench/generate/generate.py --help"
echo "  python -m bench.tools.pipeline --help"
echo "  python -m bench run --help"
echo ""
echo -e "${GREEN}完成！现在您可以开始使用Text2Mem Benchmark了。${NC}"
