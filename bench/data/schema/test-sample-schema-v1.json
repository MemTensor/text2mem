{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://text2mem.org/schemas/bench-test-sample-v1.json",
  "title": "Text2Mem Bench Test Sample",
  "description": "Schema for Text2Mem benchmark test samples",
  "type": "object",
  "required": ["id", "class", "nl", "schema_list", "expected"],
  "additionalProperties": false,
  "properties": {
    "id": {
      "type": "string",
      "pattern": "^t2m-(zh|en)-(direct|indirect)-(single|combo|workflow)-[a-z]+-[0-9]{3,}$",
      "description": "Unique test sample identifier following naming convention"
    },
    "class": {
      "type": "object",
      "required": ["instruction", "structure", "lang"],
      "additionalProperties": false,
      "properties": {
        "instruction": {
          "type": "string",
          "enum": ["direct", "indirect"],
          "description": "Instruction clarity level"
        },
        "structure": {
          "type": "string",
          "enum": ["single", "combo", "workflow"],
          "description": "Test structure complexity"
        },
        "lang": {
          "type": "string",
          "enum": ["zh", "en"],
          "description": "Test language"
        }
      }
    },
    "nl": {
      "type": "object",
      "description": "Natural language description in different languages",
      "minProperties": 1,
      "properties": {
        "zh": {
          "type": "string",
          "description": "Chinese description"
        },
        "en": {
          "type": "string",
          "description": "English description"
        }
      }
    },
    "prerequisites": {
      "type": "array",
      "description": "Prerequisite IR instructions to setup test data",
      "items": {
        "$ref": "#/$defs/IRInstruction"
      },
      "default": []
    },
    "schema_list": {
      "type": "array",
      "description": "IR instructions to test",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/IRInstruction"
      }
    },
    "init_db": {
      "type": ["string", "null"],
      "description": "Initial database snapshot name, or null for empty database",
      "default": null
    },
    "expected": {
      "type": "object",
      "required": ["assertions"],
      "properties": {
        "assertions": {
          "type": "array",
          "description": "SQL assertions to verify results",
          "items": {
            "$ref": "#/$defs/Assertion"
          }
        },
        "ranking": {
          "type": ["object", "null"],
          "description": "Ranking expectation for Retrieve operations",
          "$ref": "#/$defs/RankingExpectation"
        },
        "triggers": {
          "type": "array",
          "description": "Time-based triggers (planned feature)",
          "items": {
            "type": "object"
          },
          "default": []
        }
      }
    },
    "notes": {
      "type": "string",
      "description": "Additional notes about this test"
    },
    "tags": {
      "type": "array",
      "description": "Test tags for classification",
      "items": {
        "type": "string"
      },
      "uniqueItems": true
    }
  },
  "$defs": {
    "IRInstruction": {
      "type": "object",
      "required": ["stage", "op"],
      "properties": {
        "stage": {
          "type": "string",
          "enum": ["ENC", "STO", "RET"],
          "description": "IR stage"
        },
        "op": {
          "type": "string",
          "enum": [
            "Encode", "Label", "Update", "Merge", "Promote", "Demote", "Delete",
            "Retrieve", "Summarize", "Split", "Lock", "Expire"
          ],
          "description": "IR operation"
        },
        "target": {
          "type": "object",
          "description": "Target specification (for operations requiring target)"
        },
        "args": {
          "type": "object",
          "description": "Operation arguments"
        },
        "meta": {
          "type": "object",
          "description": "Operation metadata"
        },
        "_comment": {
          "type": "string",
          "description": "Human-readable comment (ignored by execution)"
        }
      }
    },
    "Assertion": {
      "type": "object",
      "required": ["name"],
      "oneOf": [
        {
          "description": "New assertion format (nested structure)",
          "required": ["select", "expect"],
          "properties": {
            "name": {
              "type": "string",
              "description": "Assertion name"
            },
            "select": {
              "type": "object",
              "required": ["from"],
              "properties": {
                "from": {
                  "type": "string",
                  "description": "Table name",
                  "default": "memory"
                },
                "where": {
                  "type": "array",
                  "description": "WHERE conditions (AND connected)",
                  "items": {
                    "type": "string"
                  }
                },
                "agg": {
                  "type": "string",
                  "enum": ["count"],
                  "description": "Aggregation function",
                  "default": "count"
                }
              }
            },
            "expect": {
              "type": "object",
              "required": ["op", "value"],
              "properties": {
                "op": {
                  "type": "string",
                  "enum": ["==", "!=", ">", ">=", "<", "<="],
                  "description": "Comparison operator"
                },
                "value": {
                  "type": ["number", "string"],
                  "description": "Expected value"
                }
              }
            },
            "params": {
              "type": "object",
              "description": "SQL parameters for :placeholder replacement",
              "additionalProperties": {
                "type": ["string", "number"]
              }
            }
          }
        },
        {
          "description": "Legacy assertion format (flat structure, for backward compatibility)",
          "required": ["from_table", "expect_op", "expect_value"],
          "properties": {
            "name": {
              "type": "string"
            },
            "from_table": {
              "type": "string"
            },
            "where": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "expect_op": {
              "type": "string",
              "enum": ["==", "!=", ">", ">=", "<", "<="]
            },
            "expect_value": {
              "type": ["number", "string"]
            },
            "params": {
              "type": "object"
            }
          }
        }
      ]
    },
    "RankingExpectation": {
      "type": "object",
      "required": ["gold_ids", "min_hits"],
      "properties": {
        "gold_ids": {
          "type": "array",
          "description": "Expected IDs in relevance order",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "min_hits": {
          "type": "integer",
          "description": "Minimum number of hits required",
          "minimum": 1
        },
        "allow_extra": {
          "type": "boolean",
          "description": "Whether to allow extra results",
          "default": true
        },
        "k": {
          "type": "integer",
          "description": "Evaluate top K results",
          "minimum": 1,
          "default": 5
        }
      }
    }
  }
}
